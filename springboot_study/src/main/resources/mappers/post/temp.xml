<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.korit.springboot_study.mapper.PostMapper">
    <resultMap id="postResultMap" type="com.korit.springboot_study.entity.Post">
        <id property="postId" column="post_id" />
        <result property="userId" column="pt_user_id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="likeCount" column="like_count" />

        <association property="user" resultMap="userResultMap" />
    </resultMap>

    <resultMap id="userResultMap" type="com.korit.springboot_study.entity.User">
        <id property="userId" column="ut_user_id" />
        <result property="username" column="username" /> <!--필요한 속성만 가져와도 됨-->
    </resultMap>


    <insert id="insert" keyProperty="postId" useGeneratedKeys="true">
        insert into post_tb
        values(default, #{userId}, #{title}, #{content}, now(), now())
    </insert>

    <select id="selectById" resultMap="postResultMap">
        <!--sql 쿼리문 따로 만들기(임시 테이블)-->
        with cte_post_like_count_tb as (
        select
        post_id,
        count(post_id) as like_count
        from
        post_like_tb
        group by <!--각각의 post_id에 대해 좋아요를 누른 수를 계산하고 싶다면, post_id로 그룹을 나누어야 한다-->
        post_id
        )

        select
        pt.post_id,

        pt.user_id as pt_user_id, <!-- MyBatis가 인식하려면 별칭을 정확히 지정해야 함 -->
        <!--컬럼명과 객체 속성명 일치시켜야 함 - MyBatis는 기본적으로 컬럼명과 객체 속성명이 일치해야 한다고 가정하기 때문임-->
        ut.user_id as ut_user_id,
        ut.username,

        pt.title,
        pt.content,
        pt.created_at,
        pt.updated_at,

        ifnull(cplct.like_count, 0) as like_count <!--sql에서의 null 처리-->
        from
        post_tb pt
        inner join user_tb ut on(ut.user_id = pt.user_id)

        <!--좋아요가 없어도 나오도록?-->
        left outer join cte_post_like_count_tb cplct on(cplct.post_id = pt.post_id)
        where
        post_id = #{postId}
    </select>
    <!--
    <select id="selectById" resultType="com.korit.springboot_study.entity.Post">   ->   resultMap을 안쓸 때 타입을 Mapper에 맞게
        select
            post_id as postId,
            user_id as userId,
            title,
            content,
            created_at as createAt,
            updated_at as updateAt
        from
            post_tb
        where
            post_id = #{postId}
    </select>
    -->
    <!--재사용성 안좋음. 새로 만들 때 마다 계속 as 해줘야함, 그냥 예시용-->

    <select id="selectAllBykeywordContaining" resultMap="postResultMap">
        select
        pt.post_id,

        pt.user_id as pt_user_id,
        ut.user_id as ut_user_id,
        ut.username,

        pt.title,
        pt.content,
        pt.created_at,
        pt.updated_at,

        cplct.like_count
        from
        post_tb
        inner join user_tb ut on(ut.user_id = pt.user_id)
        left outer join cte_post_like_count_tb cplct on(cplct.post_id = pt.post_id)
        where <!--제목, 내용을 or으로 검색-->
        title like concat("%", #{keyword} , "%")
        or
        content like concat("%", #{keyword} , "%")
        order by <!--다건조회일 때, 필수-->
        post_id desc <!--게시글은 내림차순-->
        limit
        #{startIndex}, #{limitCount} <!--a, b : a부터 b개 까지만-->
    </select>

</mapper>